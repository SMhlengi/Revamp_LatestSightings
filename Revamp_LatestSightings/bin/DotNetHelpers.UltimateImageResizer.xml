<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetHelpers.UltimateImageResizer</name>
    </assembly>
    <members>
        <member name="T:DotNetHelpers.UltimateImageResizer.IImageResizer">
            <summary>
            A component which resizes images.
            </summary>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Load(System.Drawing.Bitmap)">
            <summary>
            Loads an image into the resizer.
            </summary>
            <remarks>When resizing, the source image passed to this method will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="image">An image to be resized.</param>
            <exception cref="T:System.ArgumentNullException">The image parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The image does not reference a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Load(System.String)">
            <summary>
            Loads an image into the resizer. The file is loaded into memory and so the file will not be locked.
            </summary>
            <remarks>When resizing, the source image at the given file location will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="filePath">The path to the image file to open.</param>
            <exception cref="T:System.ArgumentNullException">The file path is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file path does not exist.</exception>
            <exception cref="T:System.ArgumentException">The file exists but is not a valid image file. This may happen
            if the path points to a non-image file, or if the image format is not supported by the .NET libraries.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Load(System.IO.Stream)">
            <summary>
            Loads an image into the resizer.
            </summary>
            <param name="stream">A stream containing the image data.</param>
            <exception cref="T:System.ArgumentNullException">The stream parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The stream does not point to a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Load(System.Byte[])">
            <summary>
            Loads an image into the resizer.
            </summary>
            <param name="imageBytes">An array of bytes which make an image.</param>
            <exception cref="T:System.ArgumentNullException">The imageBytes parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The bytes are not a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Load(System.Uri)">
            <summary>
            Loads an image into the resizer from a URI. This can be used to load images from the web.
            </summary>
            <param name="uri">A URI of a valid image file.</param>
            <exception cref="T:System.ArgumentNullException">The URI parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The URI does not point to a valid image file.</exception>
            <exception cref="T:System.Net.WebException">There was an error while downloading the file. This may occur
            if the file does not exist or there is no internet connection available.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.SaveToDisk(DotNetHelpers.UltimateImageResizer.OutputImageFormat,System.String)">
            <summary>Saves the image in the given format to the disk.</summary>
            <param name="format">The format to save as.</param>
            <param name="path">The full path to the file to be saved. If no file extension is specified,
            or the file extension does not match the output format, then a file extension will be added
            automatically. If the directory does not exist, it will be created. If the file already exists,
            it will be overwritten.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <exception cref="T:System.ArgumentNullException">The path is null.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, 
            on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">The path contains a colon (:) in the middle of the string.</exception>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> pointing to the newly-saved image on disk.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.GetBytes(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <summary>
            Gets the image as an array of bytes.
            </summary>
            <param name="format">The format of the image to get.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the image as an array of bytes.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.GetStream(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <summary>
            Gets the image as a stream.
            </summary>
            <param name="format">The format of the image to get.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the image as a MemoryStream.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Drawing.Size)">
            <summary>
            Resizes the image to the given target size. The actual size may be different from the
            target size depending on the value chosen for the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> property.
            </summary>
            <param name="targetSize">The desired size in pixels to resize the input image to.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the actual size that the image has been resized to. This may be different from the
            target size when <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the image to the given target size. The actual size may be different from the
            target size depending on the value chosen for the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> property.
            </summary>
            <param name="targetWidth">The desired size in pixels to resize the input image width to.</param>
            <param name="targetHeight">The desired size in pixels to resize the input image height to.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the actual size that the image has been resized to. This may be different from the
            target size when <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.CalculateActualSize(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns the size that the current image would be resized to given the current settings of
            the resizer and the target resize amount. This is useful if you need to know what size an
            image will be without actually resizing the underlying image.
            </summary>
            <remarks>
            To use the currently-loaded image's size,
            pass the Size property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property,
            e.g. 
            <codeSamples>
            <code lang="CSharp">Size actual = resizer.CalculateActualSize(
                    resizer.Image.Size, targetSize);</code>
            <code lang="VB">Dim actual As Size = resizer.CalculateActualSize( _
                    resizer.Image.Size, targetSize)</code>
            </codeSamples>
            </remarks>
            <param name="currentSize">The size of the current image. To use the currently-loaded image
            size, pass the <see cref="T:System.Drawing.Size"/> property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.
            </param>
            <param name="targetSize">The size to use as the desired resize value.</param>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the size that the image would be resized to if <see cref="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Drawing.Size)"/>
            was called. In most cases, the return size will be the same as the target size, unless
            the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.CalculateActualSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the size that the current image would be resized to given the current settings of
            the resizer and the target resize amount. This is useful if you need to know what size an
            image will be without actually resizing the underlying image.
            </summary>
            <remarks>
            To use the currently-loaded image's width and height,
            pass the Width and Height properties of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property,
            e.g. 
            <codeSamples>
            <code lang="CSharp">Size actual = resizer.CalculateActualSize(
                    resizer.Image.Width, resizer.Image.Height,
                    targetWidth, targetHeight);</code>
            <code lang="VB">Dim actual As Size = resizer.CalculateActualSize( _
                    resizer.Image.Width, resizer.Image.Height,
                    targetWidth, targetHeight)</code>
            </codeSamples>
            </remarks>
            <param name="currentWidth">The width of the current image. To use the currently-loaded image
            width, pass the Width property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.</param>
            <param name="currentHeight">The height of the current image. To use the currently-loaded image
            height, pass the Height property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.</param>
            <param name="targetWidth">The size to use as the desired resize-width value.</param>
            <param name="targetHeight">The size to use as the desired resize-height value.</param>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the size that the image would be resized to if <see cref="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Drawing.Size)"/>
            was called. In most cases, the return size will be the same as the target size, unless
            the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.IImageResizer.RotateIfNeeded">
            <summary>
            Rotates the image so that it is the right way up if the image was taken in portrait mode and
            it has not been rotated. If also resizing, this method must be called before resizing.
            </summary>
            <remarks>
            This method depends on the camera that the photo was taken on recording the orientation that the
            photo was taken in, and therefore may fail to correctly rotate the image if the camera did not
            record the correct information, or if the meta data is lost (for example after resizing the image).
            </remarks>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the type of rotation that was applied. If the image was not rotated, this will
            be <see cref="F:System.Drawing.RotateFlipType.RotateNoneFlipNone"/>.</returns>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode">
            <summary>
            Specifies how images will be resized when the aspect ratio of the desired image size
            is different to the source image's aspect ratio. For example, when a square image is
            to be resized to a rectangular size, this value determines how to fit the square image
            into the rectangular bounds. The default is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.
            </summary>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.IImageResizer.PaddingColor">
            <summary>
            Specifies the color to use for padding when <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is equal to 
            <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByPadding"/>. The default is
            <see cref="P:System.Drawing.Color.White"/>.
            </summary>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image">
            <summary>
            Gets the underlying image that is being resized.
            </summary>
        </member>
        <member name="T:DotNetHelpers.UltimateImageResizer.ImageResizer">
            <summary>
            A component which resizes images.
            </summary>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.#ctor">
            <summary>
            Creates an image resizer with no image loaded. One of the overloaded Load methods (e.g. <see cref="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.String)"/>) will
            need to be called before any other methods are called.
            </summary>
            <remarks>
            This overloaded constructor exists primarily for cases where dependency injection or similar service-based
            frameworks are used which require parameterless constructors.
            </remarks>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new image resizer using the given image as the resize target.
            </summary>
            <remarks>When resizing, the source image passed to this method will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="image">An image to be resized.</param>
            <exception cref="T:System.ArgumentNullException">The image parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The image does not reference a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.#ctor(System.String)">
            <summary>
            Creates a new image resizer by loading the given file into memory.
            </summary>
            <remarks>When resizing, the source image at the given file location will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="sourceImageFilePath">The path to the image file to open.</param>
            <exception cref="T:System.ArgumentNullException">The file path is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file path does not exist.</exception>
            <exception cref="T:System.ArgumentException">The file exists but is not a valid image file. This may happen
            if the path points to a non-image file, or if the image format is not supported by the .NET libraries.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.#ctor(System.IO.Stream)">
            <summary>
            Creates a new image resizer by loading an image from the given stream.
            </summary>
            <param name="imageStream">A stream containing image data.</param>
            <exception cref="T:System.ArgumentNullException">The stream parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The stream does not point to a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.#ctor(System.Byte[])">
            <summary>
            Creates a new image resizer using the given byte array.
            </summary>
            <param name="imageBytes">An array of bytes which make an image.</param>
            <exception cref="T:System.ArgumentNullException">The imageBytes parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The bytes are not a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.Drawing.Bitmap)">
            <summary>
            Loads an image into the resizer.
            </summary>
            <remarks>When resizing, the source image passed to this method will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="image">An image to be resized.</param>
            <exception cref="T:System.ArgumentNullException">The image parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The image does not reference a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.String)">
            <summary>
            Loads an image into the resizer. The file is loaded into memory and so the file will not be locked.
            </summary>
            <remarks>When resizing, the source image at the given file location will not be resized; rather an
            in-memory copy will be.</remarks>
            <param name="filePath">The path to the image file to open.</param>
            <exception cref="T:System.ArgumentNullException">The file path is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file path does not exist.</exception>
            <exception cref="T:System.ArgumentException">The file exists but is not a valid image file. This may happen
            if the path points to a non-image file, or if the image format is not supported by the .NET libraries.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.IO.Stream)">
            <summary>
            Loads an image into the resizer.
            </summary>
            <param name="stream">A stream containing image data.</param>
            <exception cref="T:System.ArgumentNullException">The stream parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The stream does not point to a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.Byte[])">
            <summary>
            Loads an image into the resizer.
            </summary>
            <param name="imageBytes">An array of bytes which make an image.</param>
            <exception cref="T:System.ArgumentNullException">The imageBytes parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The bytes are not a valid image file.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Load(System.Uri)">
            <summary>
            Loads an image into the resizer from a URI. This can be used to load images from the web.
            </summary>
            <param name="uri">A URI of a valid image file.</param>
            <exception cref="T:System.ArgumentNullException">The URI parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The URI does not point to a valid image file.</exception>
            <exception cref="T:System.Net.WebException">There was an error while downloading the file. This may occur
            if the file does not exist or there is no internet connection available.</exception>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.SaveToDisk(DotNetHelpers.UltimateImageResizer.OutputImageFormat,System.String)">
            <summary>Saves the image in the given format to the disk.</summary>
            <param name="format">The format to save as.</param>
            <param name="path">The full path to the file to be saved. If no file extension is specified,
            or the file extension does not match the output format, then a file extension will be added
            automatically. If the directory does not exist, it will be created. If the file already exists,
            it will be overwritten.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <exception cref="T:System.ArgumentNullException">The path is null.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, 
            on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">The path contains a colon (:) in the middle of the string.</exception>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> pointing to the newly-saved image on disk.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetBytes(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <summary>
            Gets the image as an array of bytes.
            </summary>
            <param name="format">The format of the image to get.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the image as an array of bytes.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetStream(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <summary>
            Gets the image as a stream.
            </summary>
            <param name="format">The format of the image to get.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the image as a MemoryStream.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.CreateEncoderParameters">
            <summary>
            Gets the parameters for the image encoder.
            </summary>
            <metadata static="true" access="public" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetFileExtension(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <metadata static="true" access="private" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetMimeType(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <metadata static="true" access="private" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetCodec(DotNetHelpers.UltimateImageResizer.OutputImageFormat)">
            <summary>
            Gets the codec for the given image format.
            </summary>
            <param name="format">The image format to get the codec for.</param>
            <metadata static="true" access="public" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetCodec(System.String)">
            <summary>Gets a codec info object from a mime-type.</summary>
            <param name="mimeType">The mime type to get the codec for, for example "image/jpeg" for JPEGs.</param>
            <metadata static="true" access="private" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Resize(System.Drawing.Size)">
            <summary>
            Resizes the image to the given target size. The actual size may be different from the
            target size depending on the value chosen for the <see cref="P:DotNetHelpers.UltimateImageResizer.ImageResizer.Mode"/> property.
            </summary>
            <param name="targetSize">The desired size to resize the input image to.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the actual size that the image has been resized to. This may be different from the
            target size when <see cref="P:DotNetHelpers.UltimateImageResizer.ImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the image to the given target size. The actual size may be different from the
            target size depending on the value chosen for the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> property.
            </summary>
            <param name="targetWidth">The desired size in pixels to resize the input image width to.</param>
            <param name="targetHeight">The desired size in pixels to resize the input image height to.</param>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the actual size that the image has been resized to. This may be different from the
            target size when <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.SetDrawingProperties(System.Drawing.Graphics)">
            <metadata static="true" access="private" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.GetResizeMultiplier(System.Int32,System.Int32,System.Int32,System.Int32)">
            <metadata static="true" access="private" />
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.CalculateActualSize(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns the size that the current image would be resized to given the current settings of
            the resizer and the target resize amount. This is useful if you need to know what size an
            image will be without actually resizing the underlying image.
            </summary>
            <remarks>
            To use the currently-loaded image's size,
            pass the Size property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property,
            e.g. 
            <codeSamples>
            <code lang="CSharp">Size actual = resizer.CalculateActualSize(
                    resizer.Image.Size, targetSize);</code>
            <code lang="VB">Dim actual As Size = resizer.CalculateActualSize( _
                    resizer.Image.Size, targetSize)</code>
            </codeSamples>
            </remarks>
            <param name="currentSize">The size of the current image. To use the currently-loaded image
            size, pass the <see cref="T:System.Drawing.Size"/> property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.
            </param>
            <param name="targetSize">The size to use as the desired resize value.</param>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the size that the image would be resized to if <see cref="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Drawing.Size)"/>
            was called. In most cases, the return size will be the same as the target size, unless
            the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.CalculateActualSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the size that the current image would be resized to given the current settings of
            the resizer and the target resize amount. This is useful if you need to know what size an
            image will be without actually resizing the underlying image.
            </summary>
            <remarks>
            To use the currently-loaded image's width and height,
            pass the Width and Height properties of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property,
            e.g. 
            <codeSamples>
            <code lang="CSharp">Size actual = resizer.CalculateActualSize(
                    resizer.Image.Width, resizer.Image.Height,
                    targetWidth, targetHeight);</code>
            <code lang="VB">Dim actual As Size = resizer.CalculateActualSize( _
                    resizer.Image.Width, resizer.Image.Height,
                    targetWidth, targetHeight)</code>
            </codeSamples>
            </remarks>
            <param name="currentWidth">The width of the current image. To use the currently-loaded image
            width, pass the Width property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.</param>
            <param name="currentHeight">The height of the current image. To use the currently-loaded image
            height, pass the Height property of this resizer's <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Image"/> property.</param>
            <param name="targetWidth">The size to use as the desired resize-width value.</param>
            <param name="targetHeight">The size to use as the desired resize-height value.</param>
            <exception cref="T:System.ArgumentException">The width or height is less than 1 pixel.</exception>
            <returns>Returns the size that the image would be resized to if <see cref="M:DotNetHelpers.UltimateImageResizer.IImageResizer.Resize(System.Drawing.Size)"/>
            was called. In most cases, the return size will be the same as the target size, unless
            the <see cref="P:DotNetHelpers.UltimateImageResizer.IImageResizer.Mode"/> is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.RotateIfNeeded">
            <summary>
            Rotates the image so that it is the right way up if the image was taken in portrait mode and
            it has not been rotated. If also resizing, this method must be called before resizing.
            </summary>
            <remarks>
            This method depends on the camera that the photo was taken on recording the orientation that the
            photo was taken in, and therefore may fail to correctly rotate the image if the camera did not
            record the correct information, or if the meta data is lost (for example after resizing the image).
            </remarks>
            <exception cref="T:System.InvalidOperationException">No file has been loaded in memory. Call Load first.</exception>
            <returns>Returns the type of rotation that was applied. If the image was not rotated, this will
            be <see cref="F:System.Drawing.RotateFlipType.RotateNoneFlipNone"/>.</returns>
        </member>
        <member name="M:DotNetHelpers.UltimateImageResizer.ImageResizer.Dispose">
            <summary>
            Releases the image which is being operated on.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.ImageResizer.Mode">
            <summary>
            Specifies how images will be resized when the aspect ratio of the desired image size
            is different to the source image's aspect ratio. For example, when a square image is
            to be resized to a rectangular size, this value determines how to fit the square image
            into the rectangular bounds. The default is <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/>.
            </summary>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.ImageResizer.PaddingColor">
            <summary>
            Specifies the color to use for padding when <see cref="P:DotNetHelpers.UltimateImageResizer.ImageResizer.Mode"/> is equal to 
            <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByPadding"/>. The default is
            <see cref="P:System.Drawing.Color.White"/>.
            </summary>
        </member>
        <member name="P:DotNetHelpers.UltimateImageResizer.ImageResizer.Image">
            <summary>
            Gets the underlying image that is being resized.
            </summary>
        </member>
        <member name="T:DotNetHelpers.UltimateImageResizer.OutputImageFormat">
            <summary>
            Specifies the image format to save the resized image as. This can be the same
            as the input image, or a specific format such as JPEG.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.OutputImageFormat.Jpeg">
            <summary>
            The resized image will be a JPEG image.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.OutputImageFormat.Gif">
            <summary>
            The resized image will be a GIF image. Please note that transparency and animated
            GIFs are not supported.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.OutputImageFormat.Png">
            <summary>
            The resized image will be a PNG image.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.OutputImageFormat.Bmp">
            <summary>
            The resized image will be a window Bitmap image. These are generally very large
            and not recommended.
            </summary>
        </member>
        <member name="T:DotNetHelpers.UltimateImageResizer.ResizeMode">
            <summary>
            Specifies how images will be resized when the aspect ratio of the desired image size
            is different to the source image's aspect ratio. For example, when a square image is
            to be resized to a rectangular size, this value determines how to fit the square image
            into the rectangular bounds.
            </summary>
            <remarks>
            To see examples of each resize mode, 
            <a href="http://www.dotnethelpers.com/Ultimate_Image_Resizer/Resize_Modes">click here</a>.
            </remarks>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.ResizeMode.StretchImage">
            <summary>
            The original image will be squashed to fit into the target size. This may result
            in unattractive images and is not recommended.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio">
            <summary>
            The image will be resized, keeping it's original aspect ratio. The resulting image
            will either be shorter or thinner than the requested size. This is useful when
            the image is shown independantly of other images, for example on a detail page. It
            may not be suitable for a list of thumbnails as each image will be potentially
            resized to a different size.
            </summary>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByPadding">
            <summary>
            The image will be resized, keeping it's original aspect ratio. In order to ensure
            that the output image is the same size as the requested size, extra space around the
            image will be added. This is useful when you are listing thumbnails and want to keep
            the original image's aspect ratio without cropping the image.
            </summary>
            <remarks>
            The disadvantage is
            that a fixed color will be added to the side of the image, perhaps making
            <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByCropping"/> a more suitable choice.
            The color of the padding is configurable, as is the placement of the resized image
            in relation to the added padding.
            </remarks>
        </member>
        <member name="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByCropping">
            <summary>
            The image will be resized, with some of the image cropped so that the resized image
            is the same size as the target size, and there is no empty space. An image which is
            wide may have the sides cut off; an image that is tall may have the top or bottom cut
            off. This is suitable for thumbnail lists where you want every image to be the same
            size as each other.
            </summary>
            <remarks>
            As the image may be cropped, it is not suitable for displaying
            large, stand-alone images (you may consider <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatio"/> or
            <see cref="F:DotNetHelpers.UltimateImageResizer.ResizeMode.KeepOriginalRatioByPadding"/> instead).
            </remarks>
        </member>
    </members>
</doc>
